[{"name":"FormToolkit.Decode","comment":" Map the values of an input or group of inputs to any shape you want, if you\nknow `Json.Decode` you know how to use this module ;)\n\n@docs Decoder\n\n\n# Decoding functions\n\n@docs field\n@docs string, int, float, bool, posix, maybe, list\n@docs value, customValue, json\n@docs succeed, fail, custom, format\n\n\n# Maps, combinators and pipeline style decoding\n\n@docs map, map2, map3, map4, map5, map6, map7, map8\n@docs andThen, andMap\n\n\n# Decoding\n\n@docs decode, validateAndDecode\n@docs Error, errorToFieldIdentifier\n\n","unions":[{"name":"Decoder","comment":" A decoder that takes a tree of input data and returns a decoded result or an\nerror if the decoding fails.\n","args":["id","val","a"],"cases":[]},{"name":"Error","comment":" Represents an error that occurred during decoding or validation.\n","args":["id","val"],"cases":[["ValueTooLarge",["Maybe.Maybe id","{ value : FormToolkit.Value.Value val, max : FormToolkit.Value.Value val }"]],["ValueTooSmall",["Maybe.Maybe id","{ value : FormToolkit.Value.Value val, min : FormToolkit.Value.Value val }"]],["ValueNotInRange",["Maybe.Maybe id","{ value : FormToolkit.Value.Value val, min : FormToolkit.Value.Value val, max : FormToolkit.Value.Value val }"]],["IsBlank",["Maybe.Maybe id"]],["CustomError",["Maybe.Maybe id","String.String"]],["ListError",["Maybe.Maybe id","{ index : Basics.Int, error : FormToolkit.Decode.Error id val }"]],["InputNotFound",["id"]],["RepeatableHasNoName",["Maybe.Maybe id"]],["IsGroupNotInput",["Maybe.Maybe id"]],["NoOptionsProvided",["Maybe.Maybe id"]],["ParseError",["Maybe.Maybe id"]]]}],"aliases":[],"values":[{"name":"andMap","comment":" Incrementally apply decoders in a pipeline fashion.\n\n    import FormToolkit.Field as Field exposing (Field)\n    import FormToolkit.Value as Value\n\n    type alias Person =\n        { firstName : String\n        , lastName : String\n        , age : Int\n        }\n\n    type Fields\n        = FirstName\n        | LastName\n        | Age\n\n    form : Field Fields val\n    form =\n        Field.group []\n            [ Field.text\n                [ Field.identifier FirstName\n                , Field.value (Value.string \"Penny\")\n                ]\n            , Field.text\n                [ Field.identifier LastName\n                , Field.value (Value.string \"Rimbaud\")\n                ]\n            , Field.int\n                [ Field.identifier Age\n                , Field.value (Value.int 81)\n                ]\n            ]\n\n    personDecoder : Decoder Fields val Person\n    personDecoder =\n        succeed Person\n            |> andMap (field FirstName string)\n            |> andMap (field LastName string)\n            |> andMap (field Age int)\n\n\n    form |> decode personDecoder\n    --> Ok { firstName = \"Penny\", lastName = \"Rimbaud\", age = 81 }\n\n","type":"FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val (a -> b) -> FormToolkit.Decode.Decoder id val b"},{"name":"andThen","comment":" Chains together decoders that depend on previous decoding results.\n\n    -- justinmimbs/date\n    import Date exposing (Date)\n\n    dateDecoder : Decoder id val Date\n    dateDecoder =\n        string\n            |> andThen\n                (\\strValue ->\n                    case Date.fromString \"dd.MM.yyyy\" strValue of\n                        Ok date ->\n                            succeed date\n\n                        Err err ->\n                            fail err\n                )\n\n\n    Field.text [ Field.value (Value.string \"07.03.1981\") ]\n        |> decode dateDecoder\n        --> Ok (Date.fromCalendarDate 1981 Date.March 7)\n\n","type":"(a -> FormToolkit.Decode.Decoder id val b) -> FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val b"},{"name":"bool","comment":" Decodes the input value as a `Bool`.\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n\n    Field.text [ Field.value (Value.bool True) ]\n        |> decode bool\n        --> Ok True\n\n","type":"FormToolkit.Decode.Decoder id val Basics.Bool"},{"name":"custom","comment":" ","type":"(FormToolkit.Value.Value val -> Result.Result String.String a) -> FormToolkit.Decode.Decoder id val a"},{"name":"customValue","comment":" Decodes the custom value of an input.\n\nTipically used for `select` or `radio` inputs with options of custom value, but\nalso for autocompleatable text inputs where the inputted text corresponds to an\noption text.\n\n    import FormToolkit.Field as Field exposing (Field)\n    import FormToolkit.Value as Value\n\n    type Lang\n        = ES\n        | EN\n        | DE\n\n    langSelect : Field id Lang\n    langSelect =\n        Field.select\n            [ Field.label \"Language\"\n            , Field.value (Value.custom ES)\n            , Field.options\n                [ ( \"Español\", Value.custom ES )\n                , ( \"English\", Value.custom EN )\n                , ( \"Deutsch\", Value.custom DE )\n                ]\n            ]\n\n    autocomplete : Field id Lang\n    autocomplete =\n        Field.text\n            [ Field.value (Value.string \"English\")\n            , Field.options\n                [ ( \"Español\", Value.custom ES )\n                , ( \"English\", Value.custom EN )\n                , ( \"Deutsch\", Value.custom DE )\n                ]\n            ]\n\n    langSelect |> decode customValue\n    --> Ok ES\n\n    autocomplete |> decode customValue\n    --> Ok EN\n\n","type":"FormToolkit.Decode.Decoder id val val"},{"name":"decode","comment":" Decodes an input using the given decoder without applying field validations\n(required, min, max...).\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n\n    Field.text [ Field.value (Value.string \"A string\"), Field.required True ]\n        |> decode string\n        --> Ok \"A string\"\n\n    Field.text\n        [ Field.value (Value.bool True)\n        , Field.identifier \"MyField\"\n        ]\n        |> decode string\n        --> Err [ ParseError (Just \"MyField\") ]\n\n","type":"FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Field id val -> Result.Result (List.List (FormToolkit.Decode.Error id val)) a"},{"name":"errorToFieldIdentifier","comment":" Obtain the indentifier for the field corresponding to the error, if the\nfield has identifier.\n","type":"FormToolkit.Decode.Error id val -> Maybe.Maybe id"},{"name":"fail","comment":" A decoder that always fails with a custom error.\n","type":"String.String -> FormToolkit.Decode.Decoder id val a"},{"name":"field","comment":" Decoder for a field with the given identifier using a provided decoder.\n\n    import FormToolkit.Field as Field exposing (Field)\n    import FormToolkit.Value as Value\n\n    type Fields\n        = FirstName\n        | LastName\n\n    form : Field Fields val\n    form =\n        Field.group []\n            [ Field.text\n                [ Field.label \"First name\"\n                , Field.identifier FirstName\n                , Field.value (Value.string \"Brian\")\n                ]\n            , Field.text\n                [ Field.label \"Last name\"\n                , Field.identifier LastName\n                , Field.value (Value.string \"Eno\")\n                ]\n            ]\n\n    form |> decode (field FirstName string)\n    --> Ok \"Brian\"\n\n","type":"id -> FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val a"},{"name":"float","comment":" Decodes the input value as a `Float`.\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n\n    Field.text [ Field.value (Value.float 10.5) ]\n        |> decode float\n        --> Ok 10.5\n\n","type":"FormToolkit.Decode.Decoder id val Basics.Float"},{"name":"format","comment":" ","type":"(String.String -> String.String) -> FormToolkit.Decode.Decoder id val String.String"},{"name":"int","comment":" Decodes the input value as an `Int`.\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n\n    Field.text [ Field.value (Value.int 10) ]\n        |> decode int\n        --> Ok 10\n\n","type":"FormToolkit.Decode.Decoder id val Basics.Int"},{"name":"json","comment":" Converts the entire input tree into a JSON\n[Value](https://package.elm-lang.org/packages/elm/json/latest/Json-Encode#Value).\nField `name` property will be used as the key, if an input name is not present\nthe decoder will fail.\n\nUsefull if you just one to forward the form values to a backend.\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n    import Json.Encode\n\n    Field.group [ ]\n        [ Field.text\n            [ Field.label \"First name\"\n            , Field.name \"first-name\"\n            , Field.value (Value.string \"Brian\")\n            ]\n        , Field.text\n            [ Field.label \"Last name\"\n            , Field.name \"last-name\"\n            , Field.value (Value.string \"Eno\")\n            ]\n        , Field.repeatable [ Field.name \"fruits\" ]\n            (Field.text [ Field.name \"fruit\" ])\n            [ Field.updateAttribute\n                (Field.value (Value.string \"mango\") )\n            , Field.updateAttribute\n                (Field.value (Value.string \"banana\") )\n            ]\n        ]\n        |> decode json\n        |> Result.map (Json.Encode.encode 0)\n        --> Ok \"{\\\"first-name\\\":\\\"Brian\\\",\\\"last-name\\\":\\\"Eno\\\",\\\"fruits\\\":[{\\\"fruit\\\":\\\"mango\\\"},{\\\"fruit\\\":\\\"banana\\\"}]}\"\n\n","type":"FormToolkit.Decode.Decoder id val Json.Decode.Value"},{"name":"list","comment":" Decodes a list of inputs using the given decoder.\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n\n    Field.repeatable [ ]\n        (Field.text [ ])\n        [ Field.updateAttribute\n            (Field.value (Value.string \"mango\") )\n        , Field.updateAttribute\n            (Field.value (Value.string \"banana\") )\n        ]\n        |> decode (list string)\n        --> Ok [ \"mango\", \"banana\" ]\n\n","type":"FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val (List.List a)"},{"name":"map","comment":" Transforms the result of a decoder using a function.\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n\n    Field.text [ Field.value (Value.string \"a string\") ]\n        |> decode (map String.toUpper string)\n        --> Ok \"A STRING\"\n\n","type":"(a -> b) -> FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val b"},{"name":"map2","comment":" Combines two decoders using a function.\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n\n    Field.group []\n        [ Field.text\n            [ Field.identifier \"FirstName\"\n            , Field.value (Value.string \"Iris\")\n            ]\n        , Field.text\n            [ Field.identifier \"LastName\"\n            , Field.value (Value.string \"Hefets\")\n            ]\n        ]\n        |> decode\n            (map2 Tuple.pair\n                (field \"FirstName\" string)\n                (field \"LastName\" string)\n            )\n        --> Ok ( \"Iris\", \"Hefets\" )\n\n","type":"(a -> b -> c) -> FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val b -> FormToolkit.Decode.Decoder id val c"},{"name":"map3","comment":" Combines three decoders using a function.\n\n    import FormToolkit.Field as Field exposing (Field)\n    import FormToolkit.Value as Value\n\n    type alias Person =\n        { firstName : String\n        , lastName : String\n        , age : Int\n        }\n\n    personDecoder : Decoder String val Person\n    personDecoder =\n        map3 Person\n            (field \"FirstName\" string)\n            (field \"LastName\" string)\n            (field \"Age\" int)\n\n    form : Field String val\n    form =\n        Field.group []\n            [ Field.text\n                [ Field.identifier \"FirstName\"\n                , Field.value (Value.string \"Penny\")\n                ]\n            , Field.text\n                [ Field.identifier \"LastName\"\n                , Field.value (Value.string \"Rimbaud\")\n                ]\n            , Field.int\n                [ Field.identifier \"Age\"\n                , Field.value (Value.int 81)\n                ]\n            ]\n\n    form |> decode personDecoder\n    --> Ok { firstName = \"Penny\", lastName = \"Rimbaud\", age = 81 }\n\n","type":"(a -> b -> c -> out) -> FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val b -> FormToolkit.Decode.Decoder id val c -> FormToolkit.Decode.Decoder id val out"},{"name":"map4","comment":" ","type":"(a -> b -> c -> d -> out) -> FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val b -> FormToolkit.Decode.Decoder id val c -> FormToolkit.Decode.Decoder id val d -> FormToolkit.Decode.Decoder id val out"},{"name":"map5","comment":" ","type":"(a -> b -> c -> d -> e -> out) -> FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val b -> FormToolkit.Decode.Decoder id val c -> FormToolkit.Decode.Decoder id val d -> FormToolkit.Decode.Decoder id val e -> FormToolkit.Decode.Decoder id val out"},{"name":"map6","comment":" ","type":"(a -> b -> c -> d -> e -> f -> out) -> FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val b -> FormToolkit.Decode.Decoder id val c -> FormToolkit.Decode.Decoder id val d -> FormToolkit.Decode.Decoder id val e -> FormToolkit.Decode.Decoder id val f -> FormToolkit.Decode.Decoder id val out"},{"name":"map7","comment":" ","type":"(a -> b -> c -> d -> e -> f -> g -> out) -> FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val b -> FormToolkit.Decode.Decoder id val c -> FormToolkit.Decode.Decoder id val d -> FormToolkit.Decode.Decoder id val e -> FormToolkit.Decode.Decoder id val f -> FormToolkit.Decode.Decoder id val g -> FormToolkit.Decode.Decoder id val out"},{"name":"map8","comment":" ","type":"(a -> b -> c -> d -> e -> f -> g -> h -> out) -> FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val b -> FormToolkit.Decode.Decoder id val c -> FormToolkit.Decode.Decoder id val d -> FormToolkit.Decode.Decoder id val e -> FormToolkit.Decode.Decoder id val f -> FormToolkit.Decode.Decoder id val g -> FormToolkit.Decode.Decoder id val h -> FormToolkit.Decode.Decoder id val out"},{"name":"maybe","comment":" Allows dealing with blank values without producing an error.\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n\n    Field.text [ Field.value (Value.string \"A string\") ]\n        |> decode (maybe string)\n        --> Ok (Just \"A string\")\n\n    Field.text []\n        |> decode (maybe string)\n        --> Ok Nothing\n\n","type":"FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Decoder id val (Maybe.Maybe a)"},{"name":"posix","comment":" Decodes the input value as a\n[Time.Posix](https://package.elm-lang.org/packages/elm/time/latest/Time#Posix).\n","type":"FormToolkit.Decode.Decoder id val Time.Posix"},{"name":"string","comment":" Decodes the input value as a `String`.\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n\n    Field.text [ Field.value (Value.string \"A string\") ]\n        |> decode string\n        --> Ok \"A string\"\n\n","type":"FormToolkit.Decode.Decoder id val String.String"},{"name":"succeed","comment":" A decoder that always succeeds with the given value, use for buiding\ndecoding pipelines with [andMap](#andMap), or to chain decoders with\n[andThen](#andThen).\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n\n    type Special\n        = SpecialValue\n\n    specialDecoder : Decoder id val Special\n    specialDecoder =\n        string\n            |> andThen\n                (\\strValue ->\n                    if strValue == \"special\" then\n                        succeed SpecialValue\n\n                    else\n                        fail \"Nothing special\"\n                )\n\n\n    Field.text [ Field.value (Value.string \"special\") ] |> decode specialDecoder\n    --> Ok SpecialValue\n\n","type":"a -> FormToolkit.Decode.Decoder id val a"},{"name":"validateAndDecode","comment":" Validates and decodes an input using the given decoder.\n","type":"FormToolkit.Decode.Decoder id val a -> FormToolkit.Decode.Field id val -> ( FormToolkit.Decode.Field id val, Result.Result (List.List (FormToolkit.Decode.Error id val)) a )"},{"name":"value","comment":" Returns the raw value of the input without any decoding.\n\n    import FormToolkit.Field as Field\n    import FormToolkit.Value as Value\n\n    Field.text [ Field.value (Value.string \"A string\") ]\n        |> decode value\n        --> Ok (Value.string \"A string\")\n\n","type":"FormToolkit.Decode.Decoder id val (FormToolkit.Value.Value val)"}],"binops":[]},{"name":"FormToolkit.Field","comment":" Provides types and functions to create form fields of various types, set\ntheir attributes, update, and render them.\n\n\n# Field\n\n@docs Field, Msg, update, toHtml\n\n\n# Field types\n\n@docs text, textarea, email, password, strictAutocomplete\n@docs int, float\n@docs date, month\n@docs select, radio, checkbox\n@docs group, repeatable\n\n\n# Attributes\n\n@docs Attribute\n@docs name, identifier, value, required, label, placeholder, hint\n@docs options, stringOptions, min, max, autogrow\n@docs noattr\n\n\n# Groups\n\n@docs copies, repeatableMin, repeatableMax\n\n\n# Update attributes\n\n@docs updateBy, updateAttribute, updateAttributes\n\n\n# Error\n\n@docs errors\n\n\n# Mapping and composition\n\n@docs map, mapValues\n\n","unions":[{"name":"Attribute","comment":" Represents an attribute that can be applied to a field.\n","args":["id","val"],"cases":[]}],"aliases":[{"name":"Field","comment":" Represents a form field element, which can be an individual field or a group\nof fields.\n\nThis element may consist of individual input fields (such as text, email, or\npassword), groups of fields, or repeatable fields.\n\nThe type parameter `id` corresponds to an optional identifier used for\nreferencing a specific `field` while decoding or updating attributes, and the\ntype parameter `val` refers to a value of an arbitrary type.\n\nFields are preferably identified by a custom type but can also be identified by\na `String`.\n\n","args":["id","val"],"type":"Internal.Field.Field id val (FormToolkit.Decode.Error id val)"},{"name":"Msg","comment":" A message generated through interaction with an input.\n","args":["id","val"],"type":"Internal.Field.Msg id val"}],"values":[{"name":"autogrow","comment":" Makes a `textarea` autogrow.\n","type":"Basics.Bool -> FormToolkit.Field.Attribute id val"},{"name":"checkbox","comment":" Builds a checkbox input field.\n\n    consentField : Field id val\n    consentField =\n        checkbox [ label \"Subscribe to newsletter\" ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"copies","comment":" Sets the text for the add and remove buttons in a repeatable field.\n","type":"{ addFieldsButton : String.String, removeFieldsButton : String.String } -> FormToolkit.Field.Attribute id val"},{"name":"date","comment":" Builds a date input field.\n\n    birthdateField : Field id val\n    birthdateField =\n        date [ label \"Birthdate\", required True ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"email","comment":" Builds an email input field.\n\n    emailField : Field id val\n    emailField =\n        email [ label \"Email\", required True ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"errors","comment":" Collects all errors from a field and its children.\n","type":"FormToolkit.Field.Field id val -> List.List (FormToolkit.Decode.Error id val)"},{"name":"float","comment":" Builds a floating-point number input field.\n\n    priceField : Field id val\n    priceField =\n        float [ label \"Price\", min (Value.float 0.0) ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"group","comment":" Groups a list of fields.\n\n    nameFields : Field id val\n    nameFields =\n        group\n            [ name \"person-name\" ]\n            [ text [ name \"firstName\", label \"First Name\" ]\n            , text [ name \"lastName\", label \"Last Name\" ]\n            ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> List.List (FormToolkit.Field.Field id val) -> FormToolkit.Field.Field id val"},{"name":"hint","comment":" Sets a hint or help text for a field.\n","type":"String.String -> FormToolkit.Field.Attribute id val"},{"name":"identifier","comment":" Sets the identifier to be referenced when decoding a specific field,\nextracting a segment of the form, updating the field's attributes, or\ncustomizing the rendering of a specific field or field error.\n\nAny type can be used as an identifier, but using a custom type is encouraged\nfor added type safety.\n\n    import FormToolkit.Decode as Decode\n    import FormToolkit.Value as Value\n\n    type Fields\n        = FirstName\n        | LastName\n\n    form : Field Fields value\n    form =\n        group []\n            [ text\n                [ label \"First name\"\n                , identifier FirstName\n                , value (Value.string \"Juan\")\n                ]\n            , text\n                [ label \"Last name\"\n                , identifier LastName\n                , value (Value.string \"Perez\")\n                ]\n            ]\n\n    form\n        |> Decode.decode\n            (Decode.field FirstName Decode.string)\n        --> Ok \"Juan\"\n\n","type":"id -> FormToolkit.Field.Attribute id val"},{"name":"int","comment":" Builds an integer input field.\n\n    ageField : Field id val\n    ageField =\n        int\n            [ label \"Age\"\n            , min (Value.int 0)\n            , max (Value.int 120)\n            ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"label","comment":" Sets the text to be rendered as the label for a field, or for the legend for\na group or repeatable fields group.\n","type":"String.String -> FormToolkit.Field.Attribute id val"},{"name":"map","comment":" Transforms identifiers or errors in a field, useful for combining fields\nwith identifiers of different types.\n\n    type PersonFields\n        = PersonName\n        | PersonAge\n\n    type TeamFields\n        = TeamName\n        | TeamMembers\n        | MemberFields PersonFields\n\n    personsFields : Field PersonFields val\n    personsFields =\n        group []\n            [ text\n                [ label \"Member Name\"\n                , identifier PersonName\n                ]\n            , int\n                [ label \"Member Age\"\n                , identifier PersonAge\n                ]\n            ]\n\n    teamFields : Field TeamFields val\n    teamFields =\n        group []\n            [ text\n                [ label \"Team Name\"\n                , identifier TeamName\n                ]\n            , repeatable\n                [ identifier TeamMembers ]\n                -- ↓↓↓↓\n                (map MemberFields personFields)\n                -- ↑↑↑↑\n                []\n            ]\n\n","type":"(a -> b) -> FormToolkit.Field.Field a val -> FormToolkit.Field.Field b val"},{"name":"mapValues","comment":" Maps all of the values of a field. Similar to [map](#map), which allows\ncombining fields with different identifier types, `mapValues` enables composing\nfields with different value types.\n\n    import FormToolkit.Value as Value\n\n    (select\n        [ label \"Language\"\n        , value (Value.custom ( 1, False ))\n        , options\n            [ ( \"Yes-yes\", Value.custom ( 1, True ) )\n            , ( \"Yes-no\", Value.custom ( 1, False ) )\n            , ( \"No-yes\", Value.custom ( 0, True ) )\n            , ( \"No-no\", Value.custom ( 0, False ) )\n            ]\n        ]\n        |> mapValues (Value.mapCustom (Tuple.mapFirst String.fromInt))\n        )\n        == select\n            [ label \"Language\"\n            , value (Value.custom ( \"1\", False ))\n            , options\n                [ ( \"Yes-yes\", Value.custom ( \"1\", True ) )\n                , ( \"Yes-no\", Value.custom ( \"1\", False ) )\n                , ( \"No-yes\", Value.custom ( \"0\", True ) )\n                , ( \"No-no\", Value.custom ( \"0\", False ) )\n                ]\n            ]\n            --> True\n\n","type":"(FormToolkit.Value.Value val1 -> FormToolkit.Value.Value val2) -> FormToolkit.Field.Field id val1 -> FormToolkit.Field.Field id val2"},{"name":"max","comment":" Sets the maximum value for a field input if its value is scalar:\n`int`, `float`, `date`, `month`, or `time`.\n","type":"FormToolkit.Value.Value val -> FormToolkit.Field.Attribute id val"},{"name":"min","comment":" Sets the minimum value for a field input if its value is scalar:\n`int`, `float`, `date`, `month`, or `time`.\n","type":"FormToolkit.Value.Value val -> FormToolkit.Field.Attribute id val"},{"name":"month","comment":" Builds a month input field.\n\n    monthField : Field id val\n    monthField =\n        month [ label \"Expiry Month\" ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"name","comment":" Sets the name of a field.\n\n        import FormToolkit.Decode as Decode\n        import Json.Encode\n\n        text\n            [ label \"First name\"\n            , name \"first-name\"\n            , value (Value.string \"Chavela\")\n            ]\n            |> Decode.decode Decode.json\n            |> Result.map (Json.Encode.encode 0)\n            --> Ok \"{\\\"first-name\\\":\\\"Chavela\\\"}\"\n\n","type":"String.String -> FormToolkit.Field.Attribute id val"},{"name":"noattr","comment":" An attribute that does nothing.\n","type":"FormToolkit.Field.Attribute id val"},{"name":"options","comment":" Sets the options for a [select](#select), [radio](#radio) button, or\n`datalist` for a [text](#text) field or [strictAutocomplete](#strictAutocomplete)\nto provide autocomplete suggestions.\n\n    yesSelect : Field id ( Bool, Bool )\n    yesSelect =\n        select\n            [ label \"Language\"\n            , value (Value.custom ( True, True ))\n            , options\n                [ ( \"Yes-yes\", Value.custom ( True, True ) )\n                , ( \"Yes-no\", Value.custom ( True, False ) )\n                , ( \"No-yes\", Value.custom ( False, True ) )\n                , ( \"No-no\", Value.custom ( False, False ) )\n                ]\n            ]\n\n","type":"List.List ( String.String, FormToolkit.Value.Value val ) -> FormToolkit.Field.Attribute id val"},{"name":"password","comment":" Builds a password input field.\n\n    passwordField : Field id val\n    passwordField =\n        password [ label \"Password\", required True ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"placeholder","comment":" Sets the placeholder text of a field.\n","type":"String.String -> FormToolkit.Field.Attribute id val"},{"name":"radio","comment":" Builds a radio button input field.\n\n    lightOnField : Field id val\n    lightOnField =\n        radio\n            [ label \"Light is\"\n            , options\n                [ ( \"On\", Value.bool True )\n                , ( \"Off\", Value.bool False )\n                ]\n            ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"repeatable","comment":" Builds a repeatable group of fields from a template field.\n\nA list of field update functions can be passed as the second argument to apply\nto the template, creating one field per function.\n\nThe markup includes buttons for adding and removing fields.\n\nRelevant attributes are [repeatableMin](#repeatableMin),\n[repeatableMax](#repeatableMax), and [copies](#copies).\n\n    import FormToolkit.Decode as Decode\n    import FormToolkit.Value as Value\n\n    emailsFields : Field id val\n    emailsFields =\n        repeatable\n            [ name \"emails\"\n            , repeatableMin 1\n            , repeatableMax 5\n            , copies\n                { addFieldsButton = \"Add email address\"\n                , removeFieldsButton = \"Remove\"\n                }\n            ]\n            (text [ placeholder \"Enter email address\" ])\n            [ updateAttribute\n                (value\n                    (Value.string \"email@example.com\")\n                )\n            , updateAttribute\n                (value\n                    (Value.string \"other-email@example.com\")\n                )\n            ]\n\n    emailsFields |> Decode.decode (Decode.list Decode.string)\n    --> Ok [ \"email@example.com\", \"other-email@example.com\" ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val -> List.List (FormToolkit.Field.Field id val -> FormToolkit.Field.Field id val) -> FormToolkit.Field.Field id val"},{"name":"repeatableMax","comment":" Sets the maximum number of instances for a repeating field for a\n[repeatable](#repeatable).\n","type":"Basics.Int -> FormToolkit.Field.Attribute id val"},{"name":"repeatableMin","comment":" Sets the minimum number of instances for a repeating field for a\n[repeatable](#repeatable).\n","type":"Basics.Int -> FormToolkit.Field.Attribute id val"},{"name":"required","comment":" Marks a field as required, parsing and validation will fail and the missing\nfield error will be displayed.\n\n    import FormToolkit.Decode as Decode\n    import FormToolkit.Value as Value\n\n    text [ label \"First name\" ]\n        |> Decode.decode (Decode.maybe Decode.string)\n        --> Ok Nothing\n\n","type":"Basics.Bool -> FormToolkit.Field.Attribute id val"},{"name":"select","comment":" Builds a select input field (dropdown).\n\n    type Lang\n        = ES\n        | EN\n        | DE\n\n    langSelect : Field id Lang\n    langSelect =\n        select\n            [ label \"Language\"\n            , options\n                [ ( \"Español\", Value.custom ES )\n                , ( \"English\", Value.custom EN )\n                , ( \"Deutsch\", Value.custom DE )\n                ]\n            ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"strictAutocomplete","comment":" Builds a text input field with strict autocomplete. If the input doesn't\nmatch a provided option, the input value will be blank. The value can be of\nany type.\n\nFor non-strict autocomplete, use [text](#text) with the [options](#options)\nattribute. For string value options, see [stringOptions](#stringOptions).\n\n    type Lang\n        = ES\n        | EN\n        | DE\n\n    languageField : Field id Lang\n    languageField =\n        strictAutocomplete\n            [ label \"Language\"\n            , options\n                [ ( \"Español\", Value.custom ES )\n                , ( \"English\", Value.custom EN )\n                , ( \"Deutsch\", Value.custom DE )\n                ]\n            ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"stringOptions","comment":" Sets string options for a [select](#select), [radio](#radio) button, or\n`datalist` for a [text](#text) field or [strictAutocomplete](#strictAutocomplete)\nto provide autocomplete suggestions.\n\n    flavourField : Field id ( Bool, Bool )\n    flavourField =\n        text\n            [ label \"Favorite favour\"\n            , stringOptions\n                [ \"Chocolate\"\n                , \"Pistaccio\"\n                , \"Caramel salt\"\n                ]\n            ]\n\n","type":"List.List String.String -> FormToolkit.Field.Attribute id val"},{"name":"text","comment":" Builds a text input field.\n\n[options](#options) can be provided to construct a `datalist` for autocomplete\nsuggestions.\n\n    usernameField : Field id val\n    usernameField =\n        text\n            [ label \"Username\"\n            , placeholder \"Enter your username\"\n            ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"textarea","comment":" Builds a Textarea input field.\n\n    commentsField : Field id val\n    commentsField =\n        textarea\n            [ label \"Comments\"\n            , autogrow True\n            , placeholder \"Enter your comments here\"\n            ]\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val"},{"name":"toHtml","comment":" Renders the form.\n\n    type UpdateMsg\n        = FieldsUpdated Msg\n\n    view : Html UpdateMsg\n    view =\n        group []\n            [ text [ label \"First Name\" ]\n            , text [ label \"Last Name\" ]\n            ]\n            |> toHtml FieldsUpdated\n\n","type":"(FormToolkit.Field.Msg id val -> msg) -> FormToolkit.Field.Field id val -> Html.Html msg"},{"name":"update","comment":" Updates a form by passing a decoder to validate and produce a result,\nand a [Msg](#Msg) to reflect user interactions.\n","type":"FormToolkit.Decode.Decoder id val a -> FormToolkit.Field.Msg id val -> FormToolkit.Field.Field id val -> ( FormToolkit.Field.Field id val, Result.Result (List.List (FormToolkit.Decode.Error id val)) a )"},{"name":"updateAttribute","comment":" Updates a field attribute.\n\n    import FormToolkit.Decode as Decode\n    import FormToolkit.Value as Value\n\n    text\n        [ value (Value.string \"Value\") ]\n        |> updateAttribute (value (Value.string \"Updated\"))\n        |> Decode.decode Decode.string\n        --> Ok \"Updated\"\n\n","type":"FormToolkit.Field.Attribute id val -> FormToolkit.Field.Field id val -> FormToolkit.Field.Field id val"},{"name":"updateAttributes","comment":" Updates several field attributes.\n\n    import FormToolkit.Decode as Decode\n    import FormToolkit.Value as Value\n\n    text\n        [ identifier \"Field\"\n        , stringOptions [ \"Vanilla\", \"Lemon\", \"Yogurt\" ]\n        ]\n        |> updateAttributes\n            [ value (Value.string \"Chocolate\")\n            , stringOptions\n                [ \"Chocolate\"\n                , \"Pistaccio\"\n                , \"Caramel salt\"\n                ]\n            ]\n        |> Decode.decode Decode.string\n        --> Ok \"Chocolate\"\n\n","type":"List.List (FormToolkit.Field.Attribute id val) -> FormToolkit.Field.Field id val -> FormToolkit.Field.Field id val"},{"name":"updateBy","comment":" Finds a nested field by [identifier](#identifier) and, if the nested\nfield is found, returns the topmost field with the nested field updated by the\nprovided function.\n\n    import FormToolkit.Decode as Decode\n    import FormToolkit.Value as Value\n\n    group []\n        [ text\n            [ identifier \"Field\"\n            , value (Value.string \"Value\")\n            ]\n        ]\n        |> updateBy \"Field\"\n            (updateAttribute\n                (value (Value.string \"Updated\"))\n            )\n        |> Maybe.map\n            (Decode.decode\n                (Decode.field \"Field\" Decode.string)\n            )\n        --> Just (Ok \"Updated\")\n\n","type":"id -> (FormToolkit.Field.Field id val -> FormToolkit.Field.Field id val) -> FormToolkit.Field.Field id val -> Maybe.Maybe (FormToolkit.Field.Field id val)"},{"name":"value","comment":" Sets the value of a field.\n\n    import FormToolkit.Decode as Decode\n    import FormToolkit.Value as Value\n\n    text [ label \"Name\", value (Value.string \"Chavela\") ]\n        |> Decode.decode Decode.string\n        --> Ok \"Chavela\"\n\n","type":"FormToolkit.Value.Value val -> FormToolkit.Field.Attribute id val"}],"binops":[]},{"name":"FormToolkit.Value","comment":" Value is used to set default input values of type either string, integer,\nfloat, boolean, date, month, or time.\n\n\n# Init\n\n@docs Value\n@docs string, int, float, bool, blank\n@docs date, month, time\n@docs custom\n\n\n# Convert\n\n@docs toString, toBool, toFloat, toInt, toPosix\n@docs toCustom\n\n\n# Map\n\n@docs mapCustom\n\n","unions":[{"name":"Value","comment":" ","args":["val"],"cases":[["Value",["Internal.Value.Value val"]]]}],"aliases":[],"values":[{"name":"blank","comment":" ","type":"FormToolkit.Value.Value val"},{"name":"bool","comment":" ","type":"Basics.Bool -> FormToolkit.Value.Value val"},{"name":"custom","comment":" ","type":"val -> FormToolkit.Value.Value val"},{"name":"date","comment":" ","type":"Time.Posix -> FormToolkit.Value.Value val"},{"name":"float","comment":" ","type":"Basics.Float -> FormToolkit.Value.Value val"},{"name":"int","comment":" ","type":"Basics.Int -> FormToolkit.Value.Value val"},{"name":"mapCustom","comment":" Apply a function to a custom value preserving other kind of values.\n\n    mapCuston (Tuple.mapFirst not) (custom ( True, False ))\n        == custom ( False, False )\n\n    mapCuston (Tuple.mapFirst not) (int 1)\n        == int 1\n\n","type":"(val1 -> val2) -> FormToolkit.Value.Value val1 -> FormToolkit.Value.Value val2"},{"name":"month","comment":" ","type":"Time.Posix -> FormToolkit.Value.Value val"},{"name":"string","comment":" ","type":"String.String -> FormToolkit.Value.Value val"},{"name":"time","comment":" ","type":"Time.Posix -> FormToolkit.Value.Value val"},{"name":"toBool","comment":" Convert boolean values to `Bool`.\n\n    toBool (bool True) == Just True\n\n    toBool (string \"True\") == Nothing\n\n","type":"FormToolkit.Value.Value val -> Maybe.Maybe Basics.Bool"},{"name":"toCustom","comment":" ","type":"FormToolkit.Value.Value val -> Maybe.Maybe val"},{"name":"toFloat","comment":" Convert float values to `Float`.\n\n    toFloat (float 3.14) == Just 3.14\n\n    toFloat (string \"3.14\") == Nothing\n\n","type":"FormToolkit.Value.Value val -> Maybe.Maybe Basics.Float"},{"name":"toInt","comment":" Convert int values to `Int`.\n\n    toInt (int 42) == Just 42\n\n    toInt (string \"42\") == Nothing\n\n","type":"FormToolkit.Value.Value val -> Maybe.Maybe Basics.Int"},{"name":"toPosix","comment":" Convert poxis values to `Posix`.\n\n    toPosix (time (Time.millisToPosix 0))\n        == Just (Time.millisToPosix 0)\n\n    toPosix blank == Nothing\n\n","type":"FormToolkit.Value.Value val -> Maybe.Maybe Time.Posix"},{"name":"toString","comment":" All values except for blank have a string representation.\n\n    toString (string \"Hello\") == Just \"Hello\"\n\n    toString (int 42) == Just \"42\"\n\n    toString blank == Nothing\n\n","type":"FormToolkit.Value.Value val -> Maybe.Maybe String.String"}],"binops":[]},{"name":"FormToolkit.View","comment":"\n\n\n# View\n\n@docs View, fromField, toHtml\n@docs partial\n\n\n# View customizations\n\n\n## Attributes\n\n@docs Attribute, class, classList, style\n\n\n## Markup customization\n\n@docs InputType\n@docs customizeError, customizeField\n@docs customizeGroup, customizeRepeatableFields, customizeRepeatingFieldTemplate\n\n","unions":[{"name":"Attribute","comment":" Represents an attribute that can be applied to an element.\n","args":["msg"],"cases":[]},{"name":"InputType","comment":" ","args":[],"cases":[["Text",[]],["TextArea",[]],["Email",[]],["Password",[]],["StrictAutocomplete",[]],["Integer",[]],["Float",[]],["Month",[]],["Date",[]],["Select",[]],["Radio",[]],["Checkbox",[]]]},{"name":"View","comment":" A view is a way to configure the generated markdown for an `Field` or group\nof fields.\n","args":["id","val","msg"],"cases":[]}],"aliases":[],"values":[{"name":"class","comment":" Apply a conditional list of classes\n","type":"String.String -> FormToolkit.View.Attribute msg"},{"name":"classList","comment":" Apply a conditional list of classes\n","type":"List.List ( String.String, Basics.Bool ) -> FormToolkit.View.Attribute msg"},{"name":"customizeError","comment":" Customizes how the error copies are displayed, to be used for i18n errors.\nIt's possible to override a specific error message for all fields, an individual\nfield, or for fields of a certain type.\n\n    type Fields\n        = Name\n        | Temperature\n        | Flavour\n\n    view : View Fields val ()\n    view =\n        Field.group []\n            [ Field.text\n                [ Field.label \"Name\"\n                , Field.identifier Name\n                , Field.required\n                ]\n            , Field.text\n                [ Field.label \"Temperature\"\n                , Field.identifier Temperature\n                , Field.min 20\n                , Field.max 35\n                , Field.required\n                ]\n            , Field.select\n                [ Field.label \"Flavour\"\n                , Field.identifier Flavour\n                , Field.required\n                , Field.options\n                    [ ( \"Banana\", Value.string \"banana\" )\n                    , ( \"Strawbery\", Value.string \"strawberry\" )\n                    , ( \"Chocolate\", Value.string \"chocolate\" )\n                    ]\n                ]\n            ]\n            |> View.fromField (always ())\n            |> View.customizeError\n                (\\{ inputType, error } ->\n                    let\n                        toString =\n                            Value.toString >> Maybe.withDefault \"\"\n                    in\n                    case ( inputType, error ) of\n                        ( _, ValueTooLarge _ data ) ->\n                            toString data.max ++ \" is too high\"\n\n                        ( _, ValueTooSmall _ data ) ->\n                            toString data.min ++ \" is too low\"\n\n                        ( _, ValueNotInRange _ data ) ->\n                            \"Make it in between \" ++ toString data.min ++ \" and \" ++ toString data.max\n\n                        ( Select, IsBlank _ ) ->\n                            \"Make up your mind\"\n\n                        ( _, IsBlank (Just Name) ) ->\n                            \"Who are you?\"\n\n                        ( _, IsBlank _ ) ->\n                            \"You forgot to fill in this\"\n\n                        ( _, CustomError message ) ->\n                            message\n\n                        _ ->\n                            \"Humm...?\"\n                )\n\n","type":"({ inputType : FormToolkit.View.InputType, error : FormToolkit.Decode.Error id val } -> String.String) -> FormToolkit.View.View id val msg -> FormToolkit.View.View id val msg"},{"name":"customizeField","comment":" Provide a function to override the rendering of a field.\n\n`label` and `input` are functions that take a list of\n[Attribute](#Attribute)s.\n\nUse `advanced` parameters for a greater level of customization of the field.\nIt is possible to target specific fields by `InputType`, or `identifier`.\n\nThe example bellow would render the input exactly as it normaly renders :P\n\n    view : View id val ()\n    view =\n        Field.text [ Field.label \"Name\" ]\n            |> View.fromField (always ())\n            |> customizeField\n                (\\{ isRequired, label, input, errors, hint } ->\n                    Html.div\n                        [ Attributes.class \"field\"\n                        , Attributes.classList [ ( \"required\", isRequired ) ]\n                        ]\n                        [ -- ↓ call with ↓ Attribute list\n                          label [ class \"input-label\" ]\n                        , Html.div\n                            [ Attributes.class \"input-wrapper\" ]\n                            [ -- ↓ same here, label `for` already references the input\n                              input []\n                            ]\n                        , case errors of\n                            err :: _ ->\n                                Html.p [ Attributes.class \"errors\" ] [ Html.text err ]\n\n                            [] ->\n                                hint []\n                        ]\n                )\n\n","type":"({ isRequired : Basics.Bool, label : List.List (FormToolkit.View.Attribute msg) -> Html.Html msg, input : List.List (FormToolkit.View.Attribute msg) -> Html.Html msg, hint : List.List (FormToolkit.View.Attribute msg) -> Html.Html msg, errors : List.List String.String, advanced : { identifier : Maybe.Maybe id, inputType : FormToolkit.View.InputType, inputName : Maybe.Maybe String.String, inputPlaceholder : Maybe.Maybe String.String, inputValue : FormToolkit.Value.Value val, inputMin : FormToolkit.Value.Value val, inputMax : FormToolkit.Value.Value val, inputOptions : List.List ( String.String, FormToolkit.Value.Value val ), inputOnChange : FormToolkit.Value.Value val -> msg, inputOnBlur : msg, inputOnFocus : msg, labelText : Maybe.Maybe String.String, hintText : Maybe.Maybe String.String, idString : String.String } } -> Html.Html msg) -> FormToolkit.View.View id val msg -> FormToolkit.View.View id val msg"},{"name":"customizeGroup","comment":" Provide a function to customize the rendering of a group of fields.\n\n    view : View id val ()\n    view =\n        Field.group []\n            [ Field.text [ Field.label \"Name\" ]\n            , Field.text [ Field.label \"Last Name\" ]\n            ]\n            |> View.fromField (always ())\n            |> customizeField\n                (\\{ fields, legendText } ->\n                    Html.fieldset\n                        [ Html.Attribute.class \"field-group\" ]\n                        ((case legendText of\n                            Just str ->\n                                Html.legend [] [ Html.text str ]\n\n                            Nothing ->\n                                Html.text \"\"\n                         )\n                            :: fields\n                        )\n                )\n\n","type":"({ legendText : Maybe.Maybe String.String, fields : List.List (Html.Html msg), identifier : Maybe.Maybe id, errors : List.List String.String } -> Html.Html msg) -> FormToolkit.View.View id val msg -> FormToolkit.View.View id val msg"},{"name":"customizeRepeatableFields","comment":" Customize the positioning, and appearance of each of the inputs of a repeatable\ngroup of inputs and the and the button to add new inputs.\n\nTo customize the template used to add a new input see\n[customizeRepeatingField](#customizeRepeatingField).\n\n    view : View String val ()\n    view =\n        Field.repeatable [ Field.identifier \"People\" ]\n            (Field.group []\n                [ [ Field.text [ Field.label \"Name\" ]\n                  , Field.text [ Field.label \"Last Name\" ]\n                  ]\n                ]\n            )\n            []\n            |> View.fromField (always ())\n            |> customizeRepeatableFields\n                (\\{ legendText, inputs, addFieldsButton } ->\n                    Html.fieldset []\n                        [ case legendText of\n                            Just str ->\n                                Html.legend [] [ Html.text str ]\n\n                            Nothing ->\n                                Html.text \"\"\n                        , Html.div [] inputs\n                        , addFieldsButton []\n                        ]\n                )\n\n","type":"({ legendText : Maybe.Maybe String.String, fields : List.List (Html.Html msg), addFieldsButton : List.List (FormToolkit.View.Attribute msg) -> Html.Html msg, errors : List.List String.String, advanced : { identifier : Maybe.Maybe id, addFieldsButtonOnClick : Maybe.Maybe msg, addFieldsButtonCopy : String.String } } -> Html.Html msg) -> FormToolkit.View.View id val msg -> FormToolkit.View.View id val msg"},{"name":"customizeRepeatingFieldTemplate","comment":" Customize the rendering of each of the elements of a repeatable group of\ninputs.\n\nTo customize the group of inputs see\n[customizeRepeatableFields](#customizeRepeatableFields).\n\n    view : View String val ()\n    view =\n        Field.repeatable [ Field.identifier \"People\" ]\n            (Field.group []\n                [ [ Field.text [ Field.label \"Name\" ]\n                  , Field.text [ Field.label \"Last Name\" ]\n                  ]\n                ]\n            )\n            []\n            |> View.fromField (always ())\n            |> customizeRepeatableField\n                (\\{ input, removeFieldsButton } ->\n                    Html.div\n                        [ Attributes.class \"group-repeat\" ]\n                        [ input, removeFieldsButton [] ]\n                )\n\n","type":"({ field : Html.Html msg, removeFieldsButton : List.List (FormToolkit.View.Attribute msg) -> Html.Html msg, advanced : { identifier : Maybe.Maybe id, index : Basics.Int, removeFieldsButtonOnClick : Maybe.Maybe msg, removeFieldsButtonCopy : String.String } } -> Html.Html msg) -> FormToolkit.View.View id val msg -> FormToolkit.View.View id val msg"},{"name":"fromField","comment":" Construct a view from an `Field`.\n\n    view : Html (Never -> a)\n    view =\n        Field.group []\n            [ Field.text [ Field.label \"First Name\" ]\n            , Field.text [ Field.label \"Last Name\" ]\n            ]\n            |> View.fromField (always never)\n            |> View.toHtml\n\n","type":"(Internal.Field.Msg id val -> msg) -> FormToolkit.Field.Field id val -> FormToolkit.View.View id val msg"},{"name":"partial","comment":" A partial view referenced by `identifier`.\nMaybe you want to render segments of the same form in different UI sections.\n\n    Field.group []\n        [ Field.text\n            [ Field.identifier \"FirstName\"\n            , Field.label \"First Name\"\n            ]\n        , Field.text\n            [ Field.identifier \"LastName\"\n            , Field.label \"Last Name\"\n            ]\n        ]\n        |> View.fromField (always never)\n        |> View.partial \"FirstName\"\n        == Just\n            (Field.text\n                [ Field.identifier \"FirstName\"\n                , Field.label \"First Name\"\n                ]\n            )\n\n","type":"id -> FormToolkit.View.View id val msg -> Maybe.Maybe (FormToolkit.View.View id val msg)"},{"name":"style","comment":" Apply a style\n","type":"String.String -> String.String -> FormToolkit.View.Attribute msg"},{"name":"toHtml","comment":" Render a view\n","type":"FormToolkit.View.View id val msg -> Html.Html msg"}],"binops":[]}]