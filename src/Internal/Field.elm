module Internal.Field exposing
    ( Field, Attributes, FieldType(..), Status(..)
    , Msg(..), update, updateValue, strToValue
    , init, isBlank, map
    , updateAttributes
    , identifier, inputType, max, min, name, value
    , label, hint, placeholder, options
    , isGroup, isRequired, isAutocompleteable
    , errors, setErrors
    , inputIdString
    )

{-|

@docs Field, Attributes, FieldType, Status
@docs Msg, update, updateValue, strToValue
@docs init, isBlank, map
@docs updateAttributes
@docs identifier, inputType, max, min, name, value
@docs label, hint, placeholder, options
@docs isGroup, isRequired, isAutocompleteable
@docs errors, setErrors
@docs inputIdString

-}

import Array
import Dict
import Internal.Value exposing (Value)
import List.Extra
import RoseTree.Tree as Tree


type Status
    = Pristine
    | Focused
    | Touched


type FieldType id err
    = Text
    | TextArea
    | Email
    | Password
    | StrictAutocomplete
    | Integer
    | Float
    | Month
    | Date
    | Select
    | Radio
    | Checkbox
    | Group
    | Repeatable (Field id err)


type alias Attributes id err =
    { inputType : FieldType id err
    , name : Maybe String
    , value : Value
    , isRequired : Bool
    , label : Maybe String
    , placeholder : Maybe String
    , hint : Maybe String
    , min : Value
    , max : Value
    , autogrow : Bool
    , options : List ( String, Value )
    , identifier : Maybe id
    , status : Status
    , repeatableMin : Int
    , repeatableMax : Maybe Int
    , addFieldsButtonCopy : String
    , removeFieldsButtonCopy : String
    , errors : List err
    , classList : List String
    }


type alias Field id err =
    Tree.Tree (Attributes id err)


init : FieldType id err -> List (Attributes id err -> Attributes id err) -> Attributes id err
init inputType_ =
    List.foldl (<|)
        { inputType = inputType_
        , name = Nothing
        , label = Nothing
        , hint = Nothing
        , placeholder = Nothing
        , value = Internal.Value.blank
        , min = Internal.Value.blank
        , max = Internal.Value.blank
        , autogrow = False
        , isRequired = False
        , options = []
        , identifier = Nothing
        , status = Pristine
        , repeatableMin = 1
        , repeatableMax = Nothing
        , addFieldsButtonCopy = "Add"
        , removeFieldsButtonCopy = "Remove"
        , errors = []
        , classList = []
        }


updateAttributes :
    List (Attributes id err -> Attributes id err)
    -> Field id err
    -> Field id err
updateAttributes attrList =
    Tree.updateValue
        (\attrs ->
            let
                updatedAttrs =
                    List.foldl (<|) attrs attrList
            in
            { updatedAttrs | identifier = attrs.identifier }
        )


updateValue : Value -> Field id err -> Field id err
updateValue val =
    Tree.updateValue (\attrs -> { attrs | value = val, errors = [] })


{-| A message generated by a user input.
-}
type Msg id
    = InputChanged (List Int) Internal.Value.Value
    | InputFocused (List Int)
    | InputBlured (List Int)
    | InputsAdded (List Int)
    | InputsRemoved (List Int)


updateAt :
    List Int
    -> (Field id err -> Field id err)
    -> Field id err
    -> Field id err
updateAt path func input =
    -- WTF?
    case path of
        [] ->
            func input

        _ ->
            Tree.updateAt path func input


update : Msg id -> Field a err -> Field a err
update msg input =
    case msg of
        InputChanged path val ->
            updateAt path (updateValue val) input

        InputFocused path ->
            updateAt path (Tree.updateValue focus) input

        InputBlured path ->
            updateAt path (Tree.updateValue blur) input

        InputsAdded path ->
            case
                Tree.getValueAt path input
                    |> Maybe.map .inputType
            of
                Just (Repeatable template) ->
                    updateAt path (Tree.push template) input

                _ ->
                    input

        InputsRemoved path ->
            Tree.removeAt path input


focus : Attributes id err -> Attributes id err
focus input =
    { input
        | status = Focused
        , value =
            if Internal.Value.isInvalid input.value then
                Internal.Value.Blank

            else
                input.value
    }


blur : Attributes id err -> Attributes id err
blur input =
    { input
        | status = Touched
        , value =
            case input.inputType of
                StrictAutocomplete ->
                    if Internal.Value.isBlank input.value then
                        Internal.Value.Invalid

                    else
                        input.value

                _ ->
                    input.value
    }


isBlank : Field id err -> Bool
isBlank input =
    case Tree.value input |> .inputType of
        Group ->
            False

        Repeatable _ ->
            False

        _ ->
            Internal.Value.isBlank (value input)


identifier : Field id err -> Maybe id
identifier input =
    Tree.value input |> .identifier


value : Field id err -> Value
value input =
    Tree.value input |> .value


name : Field id err -> Maybe String
name input =
    Tree.value input |> .name


placeholder : Field id err -> Maybe String
placeholder input =
    Tree.value input |> .placeholder


label : Field id err -> Maybe String
label input =
    Tree.value input |> .label


hint : Field id err -> Maybe String
hint input =
    Tree.value input |> .hint


inputType : Field id err -> FieldType id err
inputType input =
    Tree.value input |> .inputType


min : Field id err -> Value
min input =
    Tree.value input |> .min


max : Field id err -> Value
max input =
    Tree.value input |> .max


options : Field id err -> List ( String, Value )
options input =
    Tree.value input |> .options


isRequired : Field id err -> Bool
isRequired input =
    Tree.value input |> .isRequired


isAutocompleteable : Field id err -> Bool
isAutocompleteable input =
    case inputType input of
        Text ->
            not (List.isEmpty (options input))

        StrictAutocomplete ->
            True

        _ ->
            False


isGroup : Field id err -> Bool
isGroup input =
    case Tree.value input |> .inputType of
        Group ->
            True

        Repeatable _ ->
            True

        _ ->
            False


errors : Field id err -> List err
errors tree =
    case Tree.children tree of
        [] ->
            Tree.value tree |> .errors

        children ->
            (Tree.value tree |> .errors)
                :: List.map errors children
                |> List.concat


setErrors : List err -> Field id err -> Field id err
setErrors error =
    Tree.updateValue
        (\input ->
            { input
                | errors = List.Extra.unique (error ++ input.errors)
            }
        )


map : (a -> b) -> (err1 -> err2) -> Attributes a err1 -> Attributes b err2
map func errToErr input =
    { inputType = mapFieldType func errToErr input.inputType
    , name = input.name
    , value = input.value
    , isRequired = input.isRequired
    , label = input.label
    , placeholder = input.placeholder
    , hint = input.hint
    , min = input.min
    , max = input.max
    , autogrow = input.autogrow
    , options = input.options
    , identifier = Maybe.map func input.identifier
    , status = input.status
    , repeatableMin = input.repeatableMin
    , repeatableMax = input.repeatableMax
    , addFieldsButtonCopy = input.addFieldsButtonCopy
    , removeFieldsButtonCopy = input.removeFieldsButtonCopy
    , errors = List.map errToErr input.errors
    , classList = input.classList
    }


mapFieldType : (a -> b) -> (err1 -> err2) -> FieldType a err1 -> FieldType b err2
mapFieldType func errToErr inputType_ =
    case inputType_ of
        Repeatable tree ->
            Repeatable (Tree.mapValues (map func errToErr) tree)

        Text ->
            Text

        TextArea ->
            TextArea

        Email ->
            Email

        Password ->
            Password

        StrictAutocomplete ->
            StrictAutocomplete

        Integer ->
            Integer

        Float ->
            Float

        Month ->
            Month

        Date ->
            Date

        Select ->
            Select

        Radio ->
            Radio

        Checkbox ->
            Checkbox

        Group ->
            Group


inputIdString : Field id err -> String
inputIdString input =
    name input
        |> Maybe.withDefault
            (inputType input |> inputTypeToString)


inputTypeToString : FieldType id err -> String
inputTypeToString type_ =
    case type_ of
        Text ->
            "text"

        StrictAutocomplete ->
            "text"

        TextArea ->
            "textarea"

        Email ->
            "email"

        Password ->
            "password"

        Integer ->
            "integer"

        Float ->
            "float"

        Month ->
            "month"

        Date ->
            "date"

        Select ->
            "select"

        Radio ->
            "radio"

        Checkbox ->
            "checkbox"

        Repeatable _ ->
            "repeatable"

        Group ->
            "group"


strToValue : Field id err -> String -> Value
strToValue input str =
    let
        unwrappedField =
            Tree.value input

        getChoice () =
            case String.toInt str of
                Just idx ->
                    Array.fromList unwrappedField.options
                        |> Array.get idx
                        |> Maybe.map Tuple.second
                        |> Maybe.withDefault Internal.Value.blank

                Nothing ->
                    Internal.Value.blank
    in
    case unwrappedField.inputType of
        Text ->
            Internal.Value.fromNonBlankString str

        TextArea ->
            Internal.Value.fromNonEmptyString str

        Password ->
            Internal.Value.fromNonBlankString str

        StrictAutocomplete ->
            Dict.fromList unwrappedField.options
                |> Dict.get str
                |> Maybe.withDefault Internal.Value.blank

        Email ->
            Internal.Value.fromNonBlankString str

        Integer ->
            Internal.Value.intFromString str

        Float ->
            Internal.Value.floatFromString str

        Month ->
            Internal.Value.monthFromString str

        Date ->
            Internal.Value.dateFromString str

        Select ->
            getChoice ()

        Radio ->
            getChoice ()

        Checkbox ->
            Internal.Value.blank

        Group ->
            Internal.Value.blank

        Repeatable _ ->
            Internal.Value.blank
